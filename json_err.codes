# This document lists JSON errors codes and their meanings. The format of this
# file might change as right now we just want to get JSON codes we have added
# documented.
#
# TIP: To easily get a list of errors and associated notes currently known
# TIP: try:
# TIP:
# TIP:		grep -E '^# program|^JSON\[|^### NOTE:' json_err.codes
# TIP:
# TIP: If the format changes we will do our best to update the above tip as well
# TIP: but as of 15 March 2022 it works fine. However the most important line is
# TIP: the JSON[XXXX] line which will probably not change format much if at
# TIP: all.
#
# TIP: To get a list of any hints try:
# TIP:
# TIP:		grep '^# TIP:' json_err.codes
#
# The format as of 15 March 2022 is:
#
#	# program: (jchk|jinfochk|jauthchk) <function>
#	JSON[XXXX]: <(JSON|source)_file>: <line_num> <error>
#
# Where jchk means the JSON code is used in both jinfochk and jauthchk; function
# is the calling function (check_info_json(), check_author_json() etc.); XXXX is
# the error code (not the message); (JSON|source)_file is either the source file
# of the calling function or the problematic JSON file (where applicable the
# error message will include the JSON file as well); line_num is the line number
# of the offending line in the JSON file (currently each field extracted is a
# new line number which starts at 1) OR the line number in the source file; and
# error is the actual error which as stated usually has the JSON filename (the
# exception is when checking the JSON tables in the code).
#
# NOTE: As of 15 March 2022 (the day of creation of this file and the jerr() and
# jerrp() functions) most errors in json parsing uses err() or errp() and not
# the json equivalents. This will be changed in time.
#
# NOTE: In the errors below we might at times use some C printf style format
# specifiers but we won't necessarily have everything there so it's not to be
# taken literally! Also note that for some we have notes of interest under some
# errors.
#
# NOTE: We will try and keep these sorted and we will also do our best to
# remember to update the file when more codes have been added but like everyone
# else we're human and it's entirely possible we neglect these especially if
# we're distracted, have a lot on my mind (which is almost always the case for
# more than 0 of us) or some other reason. Sorry about this!
#
# NOTE: As of 2 April 2022 the reserved JSON codes are from 0 - 199 and the only
# use right now is for errors that are triggered when verifying that the JSON
# tables are sane and for shared errors across json_parse.c, jinfochk.c and jauthchk.c
# (where the message is the same except for different filename and function
# names). 
# 
# NOTE: The reason 200 codes are reserved is because it's more than enough ever
# and we don't want to have to ever change the codes after the parser and
# checkers are complete as this would cause problems for the tools as well as
# the test suites. Previously the range was 0 - 99 and although this is also
# probably more than enough we want to be sure that there is never a problem and
# we cannot imagine how 200 codes will ever not be a large enough range but if
# the use of reserved codes change this might not be the case for just 100
# (unlikely though that is).
#
# NOTE: Despite the fact codes 0 - 999 are 0-padded the numbers are NOT octal (0
# notwithstanding) but decimal and we explicitly parse the codes as decimal!
#
# NOTE: If it's still not obvious this file is very very much a work in
# progress!


###
### JSON ERROR CODES BELOW (LAST UPDATED: 19 MARCH 2022)
###

# program: jchk check_common_json_fields_table
JSON[0001]: __FILE__: %d: found JTYPE_UNSET element with non NULL name '%s' location %ju in common_json_fields table; fix table and recompile

# program: jchk check_common_json_fields_table
JSON[0002]: __FILE__: %d: found invalid data_type in (common|info|author)_json_fields table location %ju; fix table and recompile

# program: jchk check_(common|info|author)_json_fields_table
JSON[0003]: __FILE__: %d: found embedded NULL element in (common|info|author)_json_fields table at location %ju; fix table and recompile

# program: jchk check_common_json_fields_table
JSON[0004]: __FILE__: %d: no final NULL element found in (common|info|author)_json_fields table; fix table and recompile

# program: jchk find_json_field_in_table
JSON[0005]: __FILE__: %d: passed NULL table
### NOTE: The line number here is in the function find_json_field_in_table()
### NOTE: itself and not the calling function. This is not that helpful but
### NOTE: based on the tool being used it shouldn't be hard to determine which
### NOTE: which table should have been passed in: in
### NOTE: add_found_(author|common|info)_json_field() it should be the
### NOTE: (author|common|info)_json_fields and this should actually never
### NOTE: happen.

# program: jchk add_found_(author|common|info)_json_field
JSON[0006]: __FILE__: %d: passed NULL arg(s)

# program: jchk add_found_(author|common|info)_json_field
JSON[0007]: __FILE__: %d: couldn't add value '%s' to field '%s' file %s

# program: jchk add_found_(author|common|info)_json_field
JSON[0008]: __FILE__: %d: error creating new struct json_field for field '%s' value '%s' file %s

# program: jchk check_found_(author|common|info)_json_fields
JSON[0009]: __FILE__: %d: found NULL or empty field in found_(author|common|info)_json_fields list in file %s

# program: jchk check_found_(author|common|info)_json_fields
JSON[0010]: __FILE__: %d: illegal field name '%s' in found_(author|common|info)_json_fields list in file %s

# program: jchk check_found_(author|common|info)_json_fields
JSON[0011]: __FILE__: %d: NULL pointer val for field '%s' in file %s


###
### JSON ERROR CODES ABOVE
###
