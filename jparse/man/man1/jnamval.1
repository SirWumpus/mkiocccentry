.\" section 1 man page for jnamval
.\"
.\" This man page was first written by Cody Boone Ferguson for the IOCCC
.\" in 2023.
.\"
.\" Humour impairment is not virtue nor is it a vice, it's just plain
.\" wrong: almost as wrong as JSON spec mis-features and C++ obfuscation! :-)
.\"
.\" "Share and Enjoy!"
.\"     --  Sirius Cybernetics Corporation Complaints Division, JSON spec department. :-)
.\"
.TH jnamval 1 "05 August 2023" "jnamval" "IOCCC tools"
.SH NAME
.B jnamval
\- IOCCC JSON printer
.SH SYNOPSIS
.B jnamval
.RB [\| \-h \|]
.RB [\| \-V \|]
.RB [\| \-v
.IR level \|]
.RB [\| \-J
.IR level \|]
.RB [\| \-q \|]
.RB [\| \-L
.IR <num>{[t|s]} \|]
.RB [\| \-I
.IR <num>{[t|s]} \|]
.RB [\| \-t
.IR type \|]
.RB [\| \-P
.IR type \|]
.RB [\| \-l
.IR lvl \|]
.RB [\| \-Q \|]
.RB [\| \-D \|]
.RB [\| \-d \|]
.RB [\| \-i \|]
.RB [\| \-s \|]
.RB [\| \-f \|]
.RB [\| \-c \|]
.RB [\| \-C \|]
.RB [\| \-g \|]
.RB [\| \-e \|]
.RB [\| \-N \|]
.RB [\| \-H \|]
.RB [\| \-p
.IR parts \|]
.RB [\| \-n \|]
.IR op=num \|]
.RB [\| -S
.IR op=str \|]
.RB [\| \-o
.IR ofile \|]
.RB [\| \-F
.IR fmt \|]
.RB [\| \-m
.IR max_depth \|]
.RB [\| \-K \|]
.IR file.json
.RI [\| arg
.IR ... \|]
.SH DESCRIPTION
.B jnamval
parses a JSON file,
.IR file.json ,
and if it is valid will print matching member values, or, if the
.B \-i
option is specified, values that do not match.
With the
.B \-N
option it will search by names instead of values.
With the
.B \-H
option it will search by JSON hierarchies.
By default the program looks for whole matches but with the
.B \-s
option it can look for substrings and with the
.B \-g
option it can use grep\-like regular expressions.
Use of the
.B \-H
option implies the
.B \-N
option.
If no arg other than the file is specified then everything matches.
By default the tool writes the output to stdout but if you use the
.B \-o
option you can change this behaviour (\- means stdout).
The
.B \-F
option allows you to change the JSON output format.
The
.B \-m
option allows you to change the default depth to traverse when parsing the JSON where the default is set to a reasonable value for most cases (256 equivalent to the
.BR JSON_DEFAULT_MAX_DEPTH ).
.PP
The option
.B \-t
controls what types to search for, excluding matches if they are not any of the types in the comma-separated list whereas the option
.B \-P
controls what types to print.
The option
.B \-l
allows you to restrict the output based on the JSON level.
The option
.B \-L
tells the program to print the JSON level followed by a given number of spaces or tabs where the default is 4 spaces.
.B \-I
allows for indenting the levels with a default value of 4 spaces.
The option
.B \-n
allows for finding values based on different comparison modes like equality, less than, less than or equal to and so on.
The
.B \-S
option allows for comparing strings lexicographically in a similar way as to what
.B \-n
does with numbers.
As these options are more complicated in form we describe them and the rest in more detail in the
.B OPTIONS
section below.
.SH OPTIONS
.TP
.B \-h
Show help and exit.
.TP
.B \-V
Show version and exit.
.TP
.BI \-v\  level
Set verbosity level to
.IR level
(def: 0).
.TP
.BI \-J\  level
Set JSON verbosity level to
.IR level
(def: 0).
.TP
.B \-q
Suppress some of the output (def: show more information).
.TP
.BI \-L\   <num>[{t|s}
Print the JSON levels followed by the number of spaces or tabs, depending on the letter specified,
.BR t
for tabs and
.BR s
for spaces.
Not specifying either defaults to spaces.
As a convenience, specifying
.BI \-L\  tab
is an alias for
.BI \-L\  1t\c
\&.
.TP
.BI \-I\  <num>[{t|s}
Indent the JSON levels by the number of spaces or tabs, depending on the letter specified,
.BR t
for tabs and
.BR s
for spaces.
Not specifying either defaults to spaces.
As a convenience, specifying
.BI \-I\  tab
is an alias for
.BI \-I\  1t\c
\&.
.TP
.BI \-t\  type
Match only the comma separated types (def: simple).
.RS
.B int
.RS
integer values
.RE
.B float
.RS
floating point values
.RE
.B exp
.RS
exponential notation values
.RE
.B num
.RS
alias for int,float,exp
.RE
.B bool
.RS
boolean values
.RE
.B str
.RS
string values
.RE
.B null
.RS
null values
.RE
.B simple
.RS
alias for num,bool,str,null (the default)
.RE
.B member
.RS
JSON members
.RE
.B object
.RS
JSON objects
.RE
.B array
.RS
JSON arrays
.RE
.B compound
.RS
alias for 'member,object,array'
.RE
.B any
.RS
alias for 'simple,compound' (everything)
.RE
.RE
.TP
.BI \-P\  type
Print only the comma separated types (def: any).
.RS
.B int
.RS
integer values
.RE
.B float
.RS
floating point values
.RE
.B exp
.RS
exponential notation values
.RE
.B num
.RS
alias for int,float,exp
.RE
.B bool
.RS
boolean values
.RE
.B str
.RS
string values
.RE
.B null
.RS
null values
.RE
.B simple
.RS
alias for num,bool,str,null
.RE
.B member
.RS
JSON members
.RE
.B object
.RS
JSON objects
.RE
.B array
.RS
JSON arrays
.RE
.B compound
.RS
alias for 'member,object,array'
.RE
.B any
.RS
alias for 'simple,compound' (everything, default)
.RE
.RE

.TP
.BI \-l\  lvl
Only show JSON members in the given level range (def: show all levels).
.sp
.RS
If
.I lvl
is a number (e.g.: \-l 3), level must == number.
.br
If
.I lvl
is a number followed by : (e.g. '\-l 3:'), level must be >= number.
.br
If
.I lvl
is a : followed by a number (e.g. '\-l :3'), level must be <= number.
.br
If
.I lvl
is num:num (e.g. '\-l 3:5'), level must be inclusively in the range.
.RE
.TP
.B \-Q
Print JSON strings surrounded by double quotes (def: do not).
.TP
.B \-D
Print JSON strings as decoded strings (def: print JSON strings as encoded strings).
.TP
.B \-d
Match the JSON decoded values (def: match as given in the JSON document).
.TP
.B \-i
Invert match: print values that do not match (def: print values that do match).
.TP
.B \-s
Match substrings (def: match entire values).
.TP
.B \-f
Fold (ignore) case (def: case matters when matching strings).
.TP
.B \-c
Print total match count only (def: print values).
Using
.B \-c
with either
.B \-C
or
.B \-L
is an error.
.TP
.B \-C
Print match count followed by matched value (def: print values).
Using
.B \-C
with either
.B \-c
or
.B \-L
is an error.
.TP
.B \-g
Match using grep\-like extended regular expressions (def: match strings or substrings if \-s)
To match from the beginning, start arg with '^'.
To match to the end, end arg with '$'.
Using
.B \-g with
.B \-s is an error.
.TP
.B \-e
Print JSON strings as encoded strings (def: decode JSON strings).
.TP
.B \-N
Match based on JSON member names (def: match JSON member values).
.TP
.B \-H
Match name hierarchies (def: with -N match any JSON member name, else JSON member value).
Implies the
.B \-N
option.
.TP
.BI \-P\  parts
Instead of printing matching member values, print the specified parts:
.RS
.TQ
.BR n\  (alias\  name)
print JSON member names
.TQ
.BR v\  (alias\  value)
print JSON member values
.TQ
.BR b\  (alias\  both)
print JSON member names and values
.TQ
.BR j\  (alias\  json)
print JSON member with JSON syntax
.RE
.TP
.BI \-n\   op=num
Match if numeric comparison op with num is true (def: do not).
Op may be one of the following:
.RS
.TQ
.B eq
equal to
.RE
.RS
.TQ
.B lt
less than
.RE
.RS
.TQ
.B le
less than or equal to
.RE
.RS
.TQ
.B gt
greater than
.RE
.RS
.TQ
.B ge
greater than or equal to
.RE
.TP
.BI \-S\   op=str
Match if lexicographical comparison op with string is true (def: do not).
Op may be one of the following:
.RS
.TQ
.B eq
equal to
.RE
.RS
.TQ
.B lt
less than
.RE
.RS
.TQ
.B le
less than or equal to
.RE
.RS
.TQ
.B gt
greater than
.RE
.RS
.TQ
.B ge
greater than or equal to
.RE
.TP
.BI \-o\  ofile
Write to ofile (def: stdout)
.TP
.BI \-m\  max_depth
Set maximum traversal depth when parsing the JSON document.
The default is defined as the macro
.BI JSON_DEFAULT_MAX_DEPTH ,
256.
Specifying 0 means infinite depth: only safe with infinite time, variable size and RAM! :-)
.TP
.B \-K
Run built\-in test suite of some features.
.TP
.BI \-o\  ofile
Write output to specified file.
.RS
If the file already exists (case-insensitive) it is an error.
.br
If the file cannot be opened for writing it is also an error.
.br
Default is stdout which is the same as if you specified
.BR \- .
.RE
.TP
.BI \-F\  fmt
Change the JSON output format of the tool.
.RS
.TQ
.B default
Default JSON style, 1 or 2 levels per line
.RE
.RS
.TQ
.B pedantic
One level per line style
.RE
.RS
.TQ
.B colour
Default plus ANSI colour syntax highlighting
.RE
.RS
.TQ
.B color
Alias for colour, see below subsection
.RS
.RE
.RE
.RS
.TQ
.B 1line
One line output
.RE
.RS
.TQ
.B nows
One line output, no extra whitespace
.RE
.SS Coloured output
Although we do allow for 'color' instead of 'colour' it should be noted that this is not only strictly incorrect but it also prevents it from being used by both you and me.
As such we recommend that you only use 'color' if you wish to be exclusive.
.SH EXIT STATUS
.TP
0
all is OK and file is valid JSON
.TQ
1
error writing to ofile
.TQ
2
\-h and help string printed or \-V and version string printed
.TQ
3
invalid command line, invalid option or option missing an argument
.TQ
4
file does not exist, not a file, or unable to read the file
.TQ
5
file contents is not valid JSON
.TQ
6
test mode failed
.TQ
7
unable to represent a number
.TQ
8
no matches found
.TQ
>=10
internal error
.SH NOTES
.PP
The JSON parser was written as a collaboration between Cody Boone Ferguson and Landon Curt Noll, one of the IOCCC Judges, to support
IOCCCMOCK, IOCCC28 and beyond.
.PP
.BR jnamval (1)
is being developed by Cody Boone Ferguson.
.PP
For more detailed history that goes beyond this humble man page we recommend you check
.BR jnamval (1),
.IR CHANGES.md ,
.IR README.md ,
the GitHub git log as well as reading the source code (or not :\-) ).
.PP
We don't recommend you check the GitHub issue page! :\-)
This is because it's incredibly long with a lot of OT things and would take even the fastest readers a very long time to read. :\-(
.PP
.SH BUGS
.PP
It is currently incomplete and listing the missing features and things that are not correct is not worth the time or effort.
.SH EXAMPLES
.PP
Print JSON syntax of the file
.I h2g2.json
if valid JSON of member values 42:
.sp
.RS
.ft B
jnamval -p json h2g2.json 42
.ft R
.RE
.SH SEE ALSO
.PP
.BR jnamval (1),
.BR jparse (1),
.BR jnamval (1),
.BR jnamval (1)
