# This document lists JSON warning codes and their meanings. The format of this
# file might change as right now we just want to get JSON codes we have added
# documented.
#
# TIP: To easily get a list of warnings and associated notes currently known
# TIP: try:
# TIP:
# TIP:		grep -E '^# program|^{JSON-|^### NOTE:' json_warn.codes
# TIP:
# TIP: If the format changes we will do our best to update the above tip as well
# TIP: but as of 14 March 2022 it works fine. However the most important line is
# TIP: the {JSON-XXXX} line which will probably not change format much if at
# TIP: all.
#
# TIP: To get a list of any hints try:
# TIP:
# TIP:		grep '^# TIP:' json_warn.codes
#
#
# The format as of 14 March 2022 is:
#
#
#	# program: (jinfochk|jauthchk|jchk) <function>
#	{JSON-XXXX}: <source file>: <line num>: <warning>
#
# Where jchk means it (the JSON code) exists in both jinfochk and jauthchk (in
# other words it's reused) and otherwise it's the specific tool; function is the
# calling function for example check_info_json() or check_author_json() (both of
# which will change once a proper json parser is implemented); file is the
# source file but the offending json filename will be in the warning message
# (where applicable); line number the line number of the offending line
# (currently each field extracted is a new line number which starts at 1) and
# warning is the actual warning.
#
# NOTE: The current output of these tools are more verbose but we only want the
# warn messages themselves and the tool which will generate it: not the fields
# and values but the issues themselves. Not many are currently (14 March 2022)
# in this file because not many have been added to the functions yet. Also note
# that the <file> and <line num> fields in this file do not really matter but
# are simply used for demonstration purposes.
#
# NOTE: In the warnings below we might at times use some C printf style format
# specifiers but we won't necessarily have everything there so it's not to be
# taken literally! Also note that for some we have notes of interest under some
# warnings.
#
# NOTE: We will try and keep these sorted and we will also do our best to
# remember to update the file when more codes have been added but like everyone
# else we're human and it's entirely possible we neglect these especially if
# we're distracted, have a lot on my mind (which is almost always the case for
# more than 0 of us) or some other reason. Sorry about this!
#
# NOTE: As of 2 April 2022 the reserved JSON codes are from 0 - 199 and the only
# use right now is for invalid fields (which will possibly become an error and if
# that happens the code will probably be scrapped or a new use for it will be
# found). The first warning code that's not reserved (and the only one that
# exists right now) is JSON-0200 and it is when a field is found more times than
# it is allowed to exist.
#
# NOTE: The reason 200 codes are reserved is because it's more than enough ever
# and we don't want to have to ever change the codes after the parser and
# checkers are complete as this would cause problems for the tools as well as
# the test suites. Previously the range was 0 - 99 and although this is also
# probably more than enough we want to be sure that there is never a problem and
# we cannot imagine how 200 codes will ever not be a large enough range but if
# the use of reserved codes change this might not be the case for just 100
# (unlikely though that is).

#
# NOTE: Despite the fact codes 0 - 999 are 0-padded the numbers are not octal (0
# notwithstanding) but decimal and we explicitly parse the codes as decimal!
#
# NOTE: If it's still not obvious this file is very very much a work in
# progress!


###
### JSON WARNING CODES BELOW (LAST UPDATED: 19 MARCH 2022)
###

# program: jchk check_(info|author)_json
{JSON-0001}: test_work/test-0/.info.json: 1: invalid field


# program: jchk check_found_(info|author|common)_json_fields
{JSON-0200}: test_work/test-0/.info.json: 3: field found %ju times but is only allowed %ju time(s) in file %s: %s
### NOTE: The message above will currently (14 March 2022) be seen for each
### NOTE: time the field is there including the valid ones.


###
### JSON WARNING CODES ABOVE
###
