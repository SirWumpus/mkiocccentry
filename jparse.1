.TH jparse 1 "29 May 2022" "jparse" "IOCCC tools"
.SH NAME
jparse \- IOCCC JSON parser
.SH SYNOPSIS
\fBjparse [\-h] [\-v level] [\-J level] [\-q] [\-V] [\-t] [\-n] [\-s string] file ...
.SH DESCRIPTION
\fBjparse\fP will parse a block of JSON text either from a file (\fB\-\fP means \fBstdin\fP) or a string passed to the program via the \fB\-s\fP option.
.PP
.SH OPTIONS
.PP
\fB\-h\fP
Show help and exit.
.PP
\fB\-v\fP
Set verbosity level.
.PP
\fB\-J\fP
Set JSON verbosity level.
Note that you need to specify this option prior to \fB\-s\fP because \fB\-s\fP is processed immediately.
.PP
\fB\-q\fP
Suppresses some of the output (def: not quiet).
Note that you need to specify this option prior to \fB\-s\fP because \fB\-s\fP is processed immediately.
.PP
\fB\-V\fP
Show version and exit 0.
.PP
\fB\-s\fP
Parse argument as a string immediately.
Anything after the last option is considered a file.
.PP
\fB\-n\fP
Do not output a newline after parsing a string or file (def: do print a newline).
.SH EXIT STATUS
.PP
\fB0\fP for success; different non-zero values for error conditions.
.SH FILES
\fIjparse.y\fP
.RS
\fBbison\fP source file for the \fBjparse\fP tool.
.RE
\fIjparse.tab.h\fP
.RS
Header file generated by \fBbison\fP.
.RE
\fIjparse.tab.c\fP
.RS
Source file generated by \fBbison\fP.
.RE
\fIjparse.l\fP
.RS
\fBflex\fP source file for the \fBjparse\fP tool.
.RE
\fIjparse.c\fP
.RS
Source file generated by \fBflex\fP.
.RE
\fIsorry.tm.ca.h\fP
.RS
Apology for the condition of the code that's injected at the top of the files generated by \fBbison\fP and \fBflex\fP.
.RE
\fIjparse.h\fP
.RS
Header file for the \fBjparse\fP tool.
.RE
\fIjson_parse.h\fP
.RS
Header file for JSON parser support code.
.RE
\fIjson_parse.c\fP
.RS
JSON parser support code.
.RE
\fIjson_util.h\fP
.RS
Header file for general JSON parser utility support functions.
.RE
\fIjson_util.c\fP
.RS
Source code of the general JSON parser utility support functions.
.RE
\fIjson_chk.h\fP
.RS
\fBjinfochk\fP and \fBjauthchk\fP support header file.
.RE
\fIjson_chk.c\fP
.RS
\fBjinfochk\fP and \fBjauthchk\fP support source code.
.RE
.SH BUGS
.PP
\fBjparse IS INCOMPLETE and does not even create a parse tree yet!\fP
It is far from being complete.
Please don't report bugs right now as it's not supposed to work yet.
Later on we'll be happy to accept bug reports but for now it can be considered a work in progress that is far from complete.
.PP
.SH EXAMPLES
.PP
.nf
Parse the JSON string \fB{ "test_mode" : false }\fP:
.RS
\fB
 ./jparse -s '{ "test_mode" : false }'\fP
.fi
.RE
.PP
.nf
Parse input from \fBstdin\fP (send \fBEOF\fP, usually ctrl-d or \fB^D\fP, to parse):
.RS
\fB
 ./jparse -
 []
 ^D
.fi
.RE
.PP
.nf
Parse just a negative number:
.RS
\fB
 ./jparse -s -5
.fi
.RE
.PP
.nf
Parse .info.json file:
.RS
\fB
 ./jparse .info.json
.fi
.RE
.SH SEE ALSO
.PP
\fBmkiocccentry(1)\fP, \fBjinfochk(1)\fP, \fBjauthchk(1)\fP, \fBflex(1)\fP and \fBbison(1)\fP.
