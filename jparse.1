.TH jparse 1 "18 October 2022" "jparse" "IOCCC tools"
.SH NAME
jparse \- IOCCC JSON parser
.SH SYNOPSIS
\fBjparse\fP [\-h] [\-v level] [\-J level] [\-q] [\-V] [\-s] arg
.SH DESCRIPTION
\fBjparse\fP will parse a block of JSON text either from a file (\fB\-\fP means \fBstdin\fP) or a string passed to the program via the \fB\-s\fP option.
.PP
.SH OPTIONS
.TP
\fB\-h\fP
Show help and exit.
.TP
\fB\-v \fIlevel\fP\fP
Set verbosity level to level.
.TP
\fB\-J \fIlevel\fP\fP
Set JSON verbosity level to level.
Note that you need to specify this option prior to \fB\-s\fP because \fB\-s\fP is processed immediately.
.TP
\fB\-q\fP
Suppresses some of the output (def: not quiet).
Note that you need to specify this option prior to \fB\-s\fP because \fB\-s\fP is processed immediately.
.TP
\fB\-V\fP
Show version and exit.
.TP
\fB\-s\fP
Parse argument as a string.
.TP
\fB\-n\fP
Do not output a newline after parsing a string or file (def: do print a newline).
.SH EXIT STATUS
.PP
\fB0\fP for success; different non\-zero values for error conditions.
.SH NOTES
.PP
This JSON parser was written as a collaboration between Cody Boone Ferguson and Landon Curt Noll, one of the IOCCC Judges, to support \fBIOCCCMOCK\fP, \fBIOCCC28\fP and beyond.
.PP
For more detailed history that goes beyond this humble man page we recommend you check \fBjparse(1)\fP, \fBchkentry(1)\fP, \fBCHANGES.md\fP, \fBREADME.md\fP, the GitHub git log as well as reading the source code (or not :\-) ).
.PP
We don't recommend you check the GitHub issue page! :\-)
This is because it's incredibly long with a lot of OT things and would take even the fastest readers a very long time to read. :\-(
.SH BUGS
.PP
Better error reporting and various other things need to be added.
For example showing the file name and line number have to be added.
.PP
It's not yet fully re\-entrant.
.SH EXAMPLES
.PP
.nf
Parse the JSON string \fB{ "test_mode" : false }\fP:
.RS
\fB
 ./jparse \-s '{ "test_mode" : false }'\fP
.fi
.RE
.PP
.nf
Parse input from \fBstdin\fP (send \fBEOF\fP, usually ctrl\-d or \fB^D\fP, to parse):
.RS
\fB
 ./jparse \-
 []
 ^D\fP
.fi
.RE
.PP
.nf
Parse just a negative number:
.RS
\fB
 ./jparse \-s \-5\fP
.fi
.RE
.PP
.nf
Parse .info.json file:
.RS
\fB
 ./jparse .info.json\fP
.fi
.RE
.PP
.nf
Run the \fBjparse_test.sh\fP script using the default \fIjson_teststr.txt\fP file with verbosity set at 5:
.RS
\fB
 ./jparse_test.sh \-v 5\fP
.fi
.RE
.SH SEE ALSO
.PP
\fBjparse(1)\fP, \fBmkiocccentry(1)\fP, \fBjstrencode(1)\fP, \fBjstrdecode(1)\fP, \fBchkentry(1)\fP, \fBflex(1)\fP and \fBbison(1)\fP.
