/* vim: set tabstop=8 softtabstop=4 shiftwidth=4 noexpandtab : */
/*
 * jparse - tool that parses a block of JSON input
 *
 * "Because sometimes even the IOCCC Judges need some help." :-)
 *
 * This tool is currently being worked on by:
 *
 *	@xexyl
 *	https://xexyl.net		Cody Boone Ferguson
 *	https://ioccc.xexyl.net
 *
 * NOTE: This is _very incomplete_ and right now all it does is reads from either
 * stdin, the command line or a file, running yyparse() (actually ugly_parse())
 * on it. The grammar is incomplete, there are some things that are allowed that
 * are not valid JSON and many other things need to be done.
 *
 * This is very much a work in progress!
 */


#if !defined(INCLUDE_JPARSE_H)
#    define  INCLUDE_JPARSE_H

#include <stdio.h>

/*
 * json_util - utility functions for json
 */
#include "json_util.h"

/*
 * definitions
 */

/* NOTE: UGLY_DEBUG MUST be defined prior to #including jparse.tab.h! */
#define UGLY_DEBUG 1
#define UGLY__BUFFER_STATE YY_BUFFER_STATE /* see comments in jparse.l as to why we do this here */

/*
 * dbg - debug, warning and error reporting facility
 */
#include "dbg.h"


/*
 * util - utility functions and definitions
 */
#include "util.h"


/*
 * JSON functions supporting mkiocccentry code
 */
#include "json.h"

/*
 * sanity - reality checks
 */
#include "sanity.h"

/*
 * IOCCC size and rule related limitations
 */
#include "limit_ioccc.h"

/*
 * json_ckk - support jinfochk and jauthchk services
 */
#include "json_chk.h"

/*
 * jparse.tab.h - generated by bison
 */
#include "jparse.tab.h"

/*
 * usage message
 *
 * Use the usage() function to print the usage_msg([0-9]?)+ strings.
 */
static const char * const usage_msg =
    "usage: %s [-h] [-v level] [-J level] [-q] [-V] [-s string] [file ...]\n"
    "\n"
    "\t-h\t\tprint help message and exit 0\n"
    "\t-v level\tset verbosity level (def level: %d)\n"
    "\t-J level\tset JSON verbosity level (def level: %d)\n"
    "\t\t\tNOTE: You must specify this option before -s as -s is processed immediately\n"
    "\t-q\t\tquiet mode: silence msg(), warn(), warnp() if -v 0 (def: not quiet)\n"
    "\t-V\t\tprint version string and exit 0\n"
    "\t-n\t\tdo not output newline after decode output\n"
    "\t-s\t\tread arg as a string\n"
    "\n"
    "\t[file]\t\tread and parse file\n"
    "\t\t\tNOTE: - means read from stdin\n"
    "\n"
    "jparse version: %s\n";


/*
 * globals
 */
extern bool output_newline;		/* true ==> -n not specified, output new line after each arg processed */
extern unsigned num_errors;		/* > 0 number of errors encountered */
/* lexer and parser specific variables */
extern int ugly_lineno;			/* line number in lexer */
extern char *ugly_text;			/* current text */
extern FILE *ugly_in;			/* input file lexer/parser reads from */
extern unsigned num_errors;		/* > 0 number of errors encountered */
extern bool output_newline;		/* true ==> -n not specified, output new line after each arg processed */
extern int token;			/* for braces, brackets etc.: '{', '}', '[', ']', ':' and so on */
extern struct json tree;		/* the parse tree */

/*
 * function prototypes
 */
static void usage(int exitcode, char const *name, char const *str) __attribute__((noreturn));
/* lexer specific */
int ugly_lex(void);
/*
 * parser specific functions
 *
 * XXX - these are all incomplete and subject to change - XXX
 */
void ugly_error(char const *format, ...);
void parse_json_file(char const *filename); /* parse a file as JSON */
void parse_json_block(char const *string, size_t len);  /* parse a string as a JSON block */
/*
 * parse_json functions assume a specific type of data based on the token
 * returned to the parser (from the lexer) and based on the type they use the
 * appropriate function to convert and then return a pointer to it (possibly
 * first linking it into the tree).
 *
 * XXX - these are subject to change and some are incomplete as well - XXX
 */
struct json *parse_json_string(char const *string);
struct json *parse_json_number(char const *string);
struct json *parse_json_bool(char const *string);
struct json *parse_json_null(char const *string);
struct json *parse_json_array(char const *string, struct json *ast);
struct json *parse_json_member(struct json *name, struct json *value, struct json *ast);
/* json_parse() uses the above functions to parse a json blob */
struct json *json_parse(char const *ptr, size_t len, bool *is_valid);

#endif /* INCLUDE_JPARSE_H */
