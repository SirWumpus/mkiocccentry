/* json_parser - flex grammar */

/* Section 1: Declarations and option settings */

/*
 * This prevents needing to link in the flex(1) library which means those
 * without flex can compile the code. Even if everyone had flex(1) though under
 * macOS you have to pass -ll to the compiler to link in the flex library
 * whereas in other systems you have to use -lfl which would cause a lot of
 * problems.
 */
%option noyywrap
%{
/* Declarations etc. go here.
 *
 * Code is copied verbatim near the top of the generated code.
 */

#include <stdio.h>

#include "util.h"
#include "dbg.h"

/* this is generated by bison */
#include "json_parser.tab.h"
%}

/* Section 2: Patterns (regular expressions) and actions */
JSON_STRING		\"[^"]*\"
JSON_DIGIT		[0-9]
JSON_DIGITS		{JSON_DIGIT}+
JSON_INTEGER		{JSON_DIGITS}
JSON_NUMBER		{JSON_DIGITS}"."?{JSON_DIGITS}*{JSON_EXPONENT}?
JSON_SIGN		[+-]
JSON_LETTER		[a-zA-Z]
JSON_EXPONENT	""?[Ee][-+]?[0-9]+
JSON_WHITESPACE	[ \t\r\n]+
JSON_TRUE		"true"
JSON_FALSE		"false"
JSON_NULL		"null"
JSON_OPEN_BRACE	"{"
JSON_CLOSE_BRACE	"}"
JSON_OPEN_BRACKET	"["
JSON_CLOSE_BRACKET	"]"
JSON_EQUALS		":"
JSON_COMMA		","

/* Actions.
 *
 * For now we just print out what it is and return the type.
 */
%%
{JSON_WHITESPACE}	    { printf("whitespace: \"%s\"\n", yytext); return JSON_WHITESPACE; }
{JSON_STRING}		    { printf("string: \"%s\"\n", yytext); return JSON_STRING; }
{JSON_NUMBER}		    { printf("number (as string): %s\n", yytext); return JSON_NUMBER; }
{JSON_NULL}		    { printf("null: '%s'\n", yytext); return JSON_NULL; }
{JSON_TRUE}		    { printf("true: '%s'\n", yytext); return JSON_TRUE; }
{JSON_FALSE}		    { printf("false: '%s'\n", yytext); return JSON_FALSE; }
{JSON_OPEN_BRACE}	    { printf("open brace: '%c'", *yytext); return JSON_OPEN_BRACE; }
{JSON_CLOSE_BRACE}	    { printf("close brace: '%c'", *yytext); return JSON_CLOSE_BRACE;}
{JSON_OPEN_BRACKET}	    { printf("open bracket: '%c'", *yytext); return JSON_OPEN_BRACKET; }
{JSON_CLOSE_BRACKET}	    { printf("close bracket: '%c'", *yytext); return JSON_CLOSE_BRACKET; }
{JSON_EQUALS}		    { printf("equals: '%c'", *yytext); return JSON_EQUALS; }
{JSON_COMMA}		    { printf("comma: '%c'", *yytext); return JSON_COMMA; }
%%

/* Section 3: Code that's copied to the generated scanner */
