.TH dbg 3  "7 Jun 2022" "dbg" 
.SH NAME
.BR msg(),
.BR vmsg(),
.BR fmsg(),
.BR vfmsg(),
.BR dbg(),
.BR vdbg(),
.BR fdbg(),
.BR vfdbg(),
.BR warn(),
.BR vwarn(),
.BR fwarn(),
.BR vfwarn(),
.BR warnp(),
.BR vwarnp(),
.BR fwarnp(),
.BR vfwarnp(),
.BR err(),
.BR verr(),
.BR ferr(),
.BR vferr(),
.BR errp(),
.BR verrp(),
.BR ferrp(),
.BR vferrp(),
.BR werr(),
.BR vwerr(),
.BR fwerr(),
.BR vfwerr(),
.BR werrp(),
.BR vwerrp(),
.BR fwerrp(),
.BR vfwerrp(),
.BR warn_or_err(),
.BR vwarn_or_err(),
.BR fwarn_or_err(),
.BR vfwarn_or_err(),
.BR warnp_or_errp(),
.BR vwarnp_or_errp(),
.BR fwarnp_or_errp(),
.BR vfwarnp_or_errp(),
.BR printf_usage(),
.BR vprintf_usage(),
.BR fprintf_usage(),
.BR vfprintf_usage()
\- info, debug, warning, error and usage message facilities
.SH SYNOPSIS
\fB#include "dbg.h"\fP
.sp
.BI "extern int verbosity_level;		/* maximum debug level for debug messages */"
.br
.BI "extern bool msg_output_allowed;		/* false ==> disable informational messages */"
.br
.BI "extern bool dbg_output_allowed;		/* false ==> disable debug messages */"
.br
.BI "extern bool warn_output_allowed;		/* false ==> disable warning messages */"
.br
.BI "extern bool err_output_allowed;		/* false ==> disable error messages */"
.br
.BI "extern bool usage_output_allowed;		/* false ==> disable usage messages */"
.br
.BI "extern bool msg_warn_silent;		/* true ==> silence info & warnings if verbosity_level <= 0 */"
.sp
.BI "void msg(const char *fmt, ...);"
.br
.BI "void vmsg(char const *fmt, va_list ap);"
.br
.BI "void fmsg(FILE *stream, const char *fmt, ...);"
.br
.BI "void vfmsg(FILE *stream, char const *fmt, va_list ap);"
.sp
.BI "void dbg(int level, const char *fmt, ...);"
.br
.BI "void vdbg(int level, char const *fmt, va_list ap);"
.br
.BI "void fdbg(FILE *stream, int level, const char *fmt, ...);"
.br
.BI "void vfdbg(FILE *stream, int level, char const *fmt, va_list ap);"
.sp
.BI "void warn(const char *name, const char *fmt, ...);"
.br
.BI "void vwarn(char const *name, char const *fmt, va_list ap);"
.br
.BI "void fwarn(FILE *stream, const char *name, const char *fmt, ...);"
.br
.BI "void vfwarn(FILE *stream, char const *name, char const *fmt, va_list ap);"
.sp
.BI "void warnp(const char *name, const char *fmt, ...);"
.br
.BI "void vwarnp(char const *name, char const *fmt, va_list ap);"
.br
.BI "void fwarnp(FILE *stream, const char *name, const char *fmt, ...);"
.br
.BI "void vfwarnp(FILE *stream, char const *name, char const *fmt, va_list ap);"
.sp
.BI "void err(int exitcode, const char *name, const char *fmt, ...);"
.br
.BI "void verr(int exitcode, char const *name, char const *fmt, va_list ap);"
.br
.BI "void ferr(int exitcode, FILE *stream, const char *name, const char *fmt, ...);"
.br
.BI "void vferr(int exitcode, FILE *stream, char const *name, char const *fmt, va_list ap);"
.sp
.BI "void errp(int exitcode, const char *name, const char *fmt, ...);"
.br
.BI "void verrp(int exitcode, char const *name, char const *fmt, va_list ap);"
.br
.BI "void ferrp(int exitcode, FILE *stream, const char *name, const char *fmt, ...);"
.br
.BI "void vferrp(int exitcode, FILE *stream, char const *name, char const *fmt, va_list ap);"
.sp
.BI "void werr(int error_code, const char *name, const char *fmt, ...);"
.br
.BI "void vwerr(int error_code, char const *name, char const *fmt, va_list ap);"
.br
.BI "void fwerr(int error_code, FILE *stream, const char *name, const char *fmt, ...);"
.br
.BI "void vfwerr(int error_code, FILE *stream, char const *name, char const *fmt, va_list ap);"
.sp
.BI "void werrp(int error_code, const char *name, const char *fmt, ...);"
.br
.BI "void vwerrp(int error_code, char const *name, char const *fmt, va_list ap);"
.br
.BI "void fwerrp(int error_code, FILE *stream, const char *name, const char *fmt, ...);"
.br
.BI "void vfwerrp(int error_code, FILE *stream, char const *name, char const *fmt, va_list ap);"
.sp
.BI "void warn_or_err(int exitcode, const char *name, bool warning, const char *fmt, ...);"
.br
.BI "void vwarn_or_err(int exitcode, const char *name, bool warning, const char *fmt, va_list ap);
.br
.BI "void fwarn_or_err(int exitcode, FILE *stream, const char *name, bool warning, const char *fmt, ...);"
.br
.BI "void vfwarn_or_err(int exitcode, FILE *stream, const char *name, bool warning, const char *fmt, va_list ap);"
.RE
.SH DESCRIPTION
These functions provide a way to write informative messages, debug messages, warning messages, error messages, non-fatal error messages as well as usage messages.
.SS Alternative output stream
The functions that do not take a \fBFILE *\fP write to \fBstderr\fP.
The functions
.BR fmsg(),
.BR vfmsg(),
.BR fdbg(),
.BR vfdbg(),
.BR fwarn(),
.BR vfwarn(),
.BR fwarnp(),
.BR vfwarnp(),
.BR ferr(),
.BR vferr(),
.BR ferrp(),
.BR vferrp(),
.BR fwerr(),
.BR vfwerrp(),
.BR fwarn_or_err(),
.BR vfwarn_or_err(),
.BR fwarnp_or_errp(),
.BR fprintf_usage()
and
.BR vfprintf_usage()
can write to an alternative \fBFILE *\fP stream.
.SS Variadic versions
.PP
The functions
.BR vmsg(),
.BR vfmsg(),
.BR vdbg(),
.BR vfdbg(),
.BR vwarn(),
.BR vfwarn(),
.BR vwarnp(),
.BR vfwarnp(),
.BR verr(),
.BR vferr(),
.BR verrp(),
.BR vferrp(),
.BR vwerr(),
.BR vfwerr(),
.BR vwerrp(),
.BR vfwerrp(),
.BR vwarn_or_err(),
.BR vfwarn_or_err(),
.BR vwarnp_or_errp(),
.BR vprintf_usage(),
and
.BR vfprintf_usage()
are equivalent to the functions
.BR msg(),
.BR fmsg(),
.BR dbg(),
.BR fdbg(),
.BR warn(),
.BR fwarn(),
.BR warnp(),
.BR fwarnp(),
.BR err(),
.BR ferr(),
.BR errp(),
.BR ferrp(),
.BR werr(),
.BR fwerr(),
.BR werrp(),
.BR fwerrp(),
.BR warn_or_err(),
.BR fwarn_or_err(),
.BR warnp_or_errp(),
.BR printf_usage(),
and
.BR fprintf_usage()
except that they are called with a \fIva_list\fP instead of a variable number of arguments.
The state of the \fIva_list\fP is not modified by these functions.
.SS Errno versions
.PP
The functions \fBwarnp()\fP, \fBfwarnp()\fP, \fBvfwarnp()\fP, \fBerrp()\fP, \fBferrp()\fP, \fBwerrp()\fP, \fBfwerrp()\fP, \fBwarnp_or_errp()\fP and \fBfwarnp_or_errp()\fP write a message according to the value of \fBerrno\fP, making sure to restore the \fBerrno\fP value in the case the function returns.
.SS Format of the format string
The format string is a character string in the same form as \fBprintf\fP.
As these are quite complex please refer to the \fBprintf(3)\fP man page for more details and examples.
.SH RETURN VALUE
.PP
These functions return void except that the functions
.BR err(),
.BR verr(),
.BR ferr(),
.BR vferr(),
.BR errp(), 
.BR verrp(),
.BR ferrp(),
and
.BR vferrp()
do not return at all.
.PP
The functions
.BR warn_or_err(),
.BR vwarn_or_err(),
.BR fwarn_or_err(),
.BR vfwarn_or_err(),
.BR warnp_or_errp(),
.BR vwarnp_or_errp(),
.BR fwarnp_or_errp()
and
.BR vfwarnp_or_errp()
do not return if warning is false.
.PP
The functions
.BR printf_usage(),
.BR vprintf_usage(),
.BR fprintf_usage()
and
.BR vfprintf_usage()
do not return if exitcode >= 0.
.SH NOTES
.SS Variadic arguments
For the \fIva_list\fP functions, the argument \fIap\fP is not checked for consistency like they are using the primary interfaces.
For this reason these versions are not recommended for use.
.SS In case of NULL name
If \fIname\fP is \fBNULL\fP it will be set to
.BR "((NULL name))"
and the following warning, preceded by a newline, will be issued:
.sp
.BI "Warning: foo: name is NULL, forcing name to be: ((NULL name))"
.sp
where \fBfoo\fP is the name of the function.
.SS In case of NULL fmt
If \fIfmt\fP is \fBNULL\fP it will be set to
.BR "((NULL fmt))"
and the following warning, preceded by a newline, will be issued:
.sp
.BI "Warning: foo: fmt is NULL, forcing fmt to be: ((NULL fmt))"
.sp
where \fBfoo\fP is the name of the function.
.sp
When the \fIfmt\fP is \fBNULL\fP or contains no \fB%\fP specifiers the arguments following \fIfmt\fP will be ignored.
.SH EXAMPLES
.in +4n
.nf

#include <unistd.h>
#include "dbg.h"

#define VERSION_STRING "61.0 2022-06-01"

static char const * const usage =
"usage: %s [\-h] [\-v level]\n"
"\\n"
"\\t\-h\\t\\tprint help message and exit 0\n"
"\\t\-v level\\tset verbosity level: (def level: 0)\n"
"\\n"
"Version: %s";

int i;

verbosity_level = DBG_LOW;

while ((i = getopt(argc, argv, "hv:")) != \-1) {
    switch (i) {
    case 'h':       /* \-h \- write help to stderr and exit 0 */
	    /* exit(0); */
	    fprintf_usage(0, stderr, usage, program, DBG_VERSION); /*ooo*/
	    not_reached();
	    break;
    case 'v':       /* \-v verbosity */
	    /* parse verbosity */
	    errno = 0;                  /* pre\-clear errno for errp() */
	    verbosity_level = (int)strtol(optarg, NULL, 0);
	    if (errno != 0) {
		    /* exit(1); */
		    errp(1, __func__, "cannot parse -v arg: %s", optarg); /*ooo*/
		    not_reached();
	    }
	break;
    default:
	    fprintf_usage(DO_NOT_EXIT, stderr, "invalid \-flag");
	    fprintf_usage(3, stderr, usage, program, VERSION_STRING); /*ooo*/
	    not_reached();
    }

    /* ... */

    dbg(DBG_LOW, "starting critical section");
    dbg(DBG_MED, "file: %s has length: %ld", filename, length);
    if (buf[0] < MIN_BYTE) {
        dbg(DBG_VVHIGH, "Leading buffer byte: 0x%02x < minimum: 0x%02x", buf[0], MIN_BYTE);
    }

    /* ... */

    errno = 0;                      /* pre\-clear errno for warnp() */
    ret = fprintf(answerp, "%s\n", info.title);
    if (ret <= 0) {
        warnp(__func__, "fprintf error writing title to the answers file");
    }

    /* ... */
    errno = 0;
    tarball = strdup(tarball_path);
    if (tarball == NULL) {
        errp(9, __func__, "strdup() tarball path %s failed", tarball_path);
        not_reached();
    }
.fi
.in
.SH SEE ALSO
.BR printf(3)
